{"version":3,"sources":["index.js"],"names":["Search","Input","date","Date","weatherDict","App","props","fetchData","url","callback","fetchJsonp","then","res","json","catch","err","console","log","getData","axios","get","windDirection","windBearing","getLocation","navigator","geolocation","getCurrentPosition","position","setState","lat","coords","latitude","lng","longitude","baseUrl","state","timezone","current_data","currently","today_data","daily","data","tomorrow_data","day_after_tomorrow_data","loading","this","className","style","backgroundImage","icon","placeholder","enterButton","size","onSearch","value","results","geometry","location","Math","round","temperature","src","alt","setTime","sunriseTime","toLocaleTimeString","timeZone","sunsetTime","Item","Meta","avatar","title","time","toLocaleDateString","description","temperatureMin","temperatureMax","fontWeight","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.089647e2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport {Avatar, Input, List} from \"antd\";\nimport axios from \"axios\";\nimport fetchJsonp from \"fetch-jsonp\";\n\nconst {Search} = Input;\nconst date = new Date();\n// Use a dictionary to translate the icon which is in English to Chinese\nconst weatherDict = {\n    \"clear-day\": \"晴天\",\n    \"clear-night\": \"清夜\",\n    \"cloudy\": \"多云\",\n    \"fog\": \"雾\",\n    \"partly-cloudy-day\": \"局部多云\",\n    \"partly-cloudy-night\": \"局部多云\",\n    \"wind\": \"大风\",\n    \"snow\": \"雪\",\n    \"rain\": \"雨\",\n    \"sleet\": \"雨夹雪\"\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseUrl: 'https://api.darksky.net/forecast/fab65de022b3477cc37e14796f99627b/37.8267,-122.4233?lang=zh&units=si',\n            timezone: \"\",\n            lat: \"\",\n            lng: \"\",\n            current_data: {},\n            today_data: {},\n            tomorrow_data: {},\n            day_after_tomorrow_data: {},\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    // Use jsonp to solve the CORB\n    fetchData = (url, callback) => {\n        fetchJsonp(url)\n            .then(res => {\n                return res.json()\n            }).then(json => {\n                callback(json)\n            }\n        ).catch(err => {\n            console.log(err)\n        });\n    };\n\n    getData = (url, callback) => {\n        axios.get(url)\n            .then(res => {\n                callback(res)\n            }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    windDirection = windBearing => {\n        if (windBearing > 0 && windBearing <= 90) {\n            return \"东北风\";\n        } else if (windBearing > 90 && windBearing <= 180) {\n            return \"东南风\";\n        } else if (windBearing > 180 && windBearing <= 270) {\n            return \"西南风\";\n        } else if (windBearing > 270 && windBearing <= 360) {\n            return \"西北风\";\n        } else if (windBearing === 0) {\n            return \"未知\";\n        }\n    };\n\n    getLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                    baseUrl: \"https://api.darksky.net/forecast/fab65de022b3477cc37e14796f99627b/\" + position.coords.latitude + \", \" + position.coords.longitude + \"?lang=zh&units=si\"\n                }, callback => {\n                    this.fetchData(this.state.baseUrl, res => {\n                        this.setState({\n                            timezone: res.timezone,\n                            current_data: res.currently,\n                            today_data: res.daily.data[0],\n                            tomorrow_data: res.daily.data[1],\n                            day_after_tomorrow_data: res.daily.data[2],\n                            loading: false\n                        })\n                    })\n                })\n            })\n        } else {\n            console.log(\"Geolocation is not supported by this browser\")\n        }\n    }\n\n    render() {\n        return (\n            <div className='Main' style={{backgroundImage: \"url('pic/\" + this.state.current_data.icon + \"bg.png')\"}}>\n                <div className='content'>\n                    <div className='search'>\n                        <Search\n                            className='searchBar'\n                            placeholder=\"请输入城市名\"\n                            enterButton\n                            size=\"large\"\n                            onSearch={value => {\n                                this.getData(\"https://maps.googleapis.com/maps/api/geocode/json?address=\" + value + \"&key=AIzaSyBO6BM6qEG3f7yNdUyEtZG20H3pdCbnM88\",\n                                    res => {\n                                        this.setState({\n                                                baseUrl: 'https://api.darksky.net/forecast/fab65de022b3477cc37e14796f99627b/'\n                                                    + res.data.results[0].geometry.location.lat\n                                                    + \", \"\n                                                    + res.data.results[0].geometry.location.lng\n                                                    + \"?lang=zh&units=si\",\n                                            },\n                                            () => {\n                                                this.fetchData(this.state.baseUrl, res => {\n                                                    //TODO: Use an iterator to set the data into state\n                                                    this.setState({\n                                                        timezone: res.timezone,\n                                                        current_data: res.currently,\n                                                        today_data: res.daily.data[0],\n                                                        tomorrow_data: res.daily.data[1],\n                                                        day_after_tomorrow_data: res.daily.data[2],\n                                                        loading: false\n                                                    })\n                                                });\n                                            })\n                                    });\n                            }}\n                        >\n                        </Search>\n                    </div>\n                    <div className='weather'>\n                        <span className='temperature'>{Math.round(this.state.current_data.temperature) + \"°C\"}</span>\n                        <span className='weatherIconText'>\n                            <span className='weather-text'>{weatherDict[this.state.current_data.icon]}</span>\n                            <img src={\"pic/\" + this.state.current_data.icon + \".png\"}\n                                 className='weather-icon' alt=\"\"\n                            />\n                            </span>\n                        <span className='wind'>{this.windDirection(this.state.current_data.windBearing)}</span>\n                        <img className='windDirection-icon' src={\"pic/windDirection.png\"} alt=\"\"/>\n                        <span className='sunriseToSunset'>\n                            <img className='sunrise' src='pic/sunrise.png' alt=''/>\n                            <span className='line'/>\n                            <img className='sunset' src='pic/sunset.png' alt=''/>\n                            <span className='time'>\n                            <span\n                                className='sunriseTime'>{new Date(date.setTime(this.state.today_data.sunriseTime * 1000)).toLocaleTimeString('en-US', {timeZone: this.state.timezone})}</span>\n                            <span\n                                className='sunsetTime'>{new Date(date.setTime(this.state.today_data.sunsetTime * 1000)).toLocaleTimeString('en-US', {timeZone: this.state.timezone})}</span>\n                            </span>\n                            </span>\n                    </div>\n                    <div className='forecast'>\n                        <List>\n                            <List.Item>\n                                <List.Item.Meta\n                                    avatar={<Avatar src={\"pic/\" + this.state.today_data.icon + \".png\"}/>}\n                                    title={new Date(date.setTime(this.state.today_data.time * 1000)).toLocaleDateString('en-US', {timeZone: this.state.timezone})}\n                                    description={Math.round(this.state.today_data.temperatureMin) + \"°C-\" + Math.round(this.state.today_data.temperatureMax) + \"°C\"}\n                                />\n                                <span style={{fontWeight: \"bold\"}}>{weatherDict[this.state.today_data.icon]}</span>\n                            </List.Item>\n                            <List.Item>\n                                <List.Item.Meta\n                                    avatar={<Avatar\n                                        src={\"pic/\" + this.state.tomorrow_data.icon + \".png\"}/>}\n                                    title={new Date(date.setTime(this.state.tomorrow_data.time * 1000)).toLocaleDateString('en-US', {timeZone: this.state.timezone})}\n                                    description={Math.round(this.state.tomorrow_data.temperatureMin) + \"°C-\" + Math.round(this.state.tomorrow_data.temperatureMax) + \"°C\"}\n                                />\n                                <span style={{fontWeight: \"bold\"}}>{weatherDict[this.state.tomorrow_data.icon]}</span>\n                            </List.Item>\n                            <List.Item>\n                                <List.Item.Meta\n                                    avatar={<Avatar\n                                        src={\"pic/\" + this.state.day_after_tomorrow_data.icon + \".png\"}/>}\n                                    title={new Date(date.setTime(this.state.day_after_tomorrow_data.time * 1000)).toLocaleDateString('en-US', {timeZone: this.state.timezone})}\n                                    description={Math.round(this.state.day_after_tomorrow_data.temperatureMin) + \"°C-\" + Math.round(this.state.day_after_tomorrow_data.temperatureMax) + \"°C\"}\n                                />\n                                <span\n                                    style={{fontWeight: \"bold\"}}>{weatherDict[this.state.day_after_tomorrow_data.icon]}</span>\n                            </List.Item>\n                        </List>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}